(*.F- *)
(**********************************************************************
|  Title   : Przegladanie wejsc analogowych i cyfrowych
|  Author  : D.Arendt
|  System  : LOGITECH MODULA-2/86
|  History :
|   18-02-96: M.Postol
|     procedura Start zostala zmieniona by umoliwic przekazanie
|     parametrow lotu
|   22-02-96 : M.Postol
|    procedura Start Start zostala zmieniona - format promienia
|   27-10-96 : M.Postol
|     wstawilem TeoAlfaF
|   14-12-96: M.Postol
|     zmiana def Start ze wzgledu na VOR'a trasowego
|   23-02-97: M.Postol
|    wprowadzilem mozliwosc ustawiania procedur dla obliczania predkosci i kata 
|    dla symulatora wew.
|   10-05-97: M.Postol
|     zdefiniowalem DeltaF, bo ciagle byly problemy z GPS'em
|     zdefiniowalem procedure CurrGPSAlfaOffset potrzebna dla DME w LOCarch
|     wywalilem OdnDlaPomBledu
|     wywalilem parametry w Start, ktore sa zdefiniowane w CommonData
|   21-01-98 T. ROZMARYNOWSKI
|     wprowadzona flaga korekcji DGPS GPS_DIFFMODE
|     wywalilem zmienna gDOP
|   Rel.3.0.
|   M.Postol
|     zmienilem typ TEO_OK na taki sam jak TheodolitRead, aby uniknac 
|     niepotrzebnej konwersji
|     zmienilem typ GPS_OK na taki sam jak GPSRead, aby uniknac 
|     niepotrzebnej konwersji
|     wywalilem wszystkie niepotrzebne stale do sygnalizacji stanu GPS i TEO
|   Rel.3.14: MPostol
|     DeltaDME - nowa zmienna, aby uwzglednic inne polozenie DME niz w 
|     antenach LOC
|
|  Copyright (C), CAS LODZ POLAND.
|  TEL: 42' 862 547, 42' 87 80 44 FAX/TEL: 42' 84 48 40
|
**********************************************************************)
(*.F+ *)

DEFINITION MODULE ScannerI;

  IMPORT TheodolitRead, GPSRead;
  
  FROM DGHIni IMPORT
    SignalNames;

  FROM CommonTypes IMPORT
    GlownyOdbiornikT, OdnDlaPomOdlT, signTabC, OdnDlaPomBleduT, signTab,
    signTabBin, refTab, distTab;

  TYPE
    DtaSignType;
    Sim_Dis_PROC  = PROCEDURE (): CARDINAL;
    Sim_Alfa_PROC = PROCEDURE (): INTEGER;
    TeoState      = TheodolitRead.TeoState;
    TeoStates     = TheodolitRead.TeoStates;
    StanyGPS      = GPSRead.StanyGPS;
    StanGPS       = GPSRead.StanGPS;
    
  VAR
    flg              : BITSET;
    Alfa             : refTab;  (* azymut wg odpowiedniego urzadzenia *)
    AlfaF            : refTab;  (* AlfaF dane podtrzymane NilVal oznacza 
                                   brak odczytu danych przez okreslony czas,
                                   lub pojawienie sie flag *)
    RefAlfa          : INTEGER;
    TeoAlfaF         : INTEGER;  (* azymut wg TEO - dana podtrzymywana generowana dla 
                                    GS *)
    Delta            : distTab;  (* odleglosc wg odpowiedniego urzadzenia *)
    DeltaDME         : signTabC; (* odleglosc wg GPS dla poszczegolnych 
                                    odbiornikow DME *)
    DeltaF           : distTab;  (* odleglosc wg odpowiedniego urzadzenia dane 
                                    podtrzymane *)
    RefDis           : CARDINAL; (* 1 == 0.002 NM *)
    ABOVESL          : INTEGER;  (* 100 FT tyle ile z wysokosciomierza *)
    pilErr           : INTEGER;
    TEO_A            : REAL;
    TEO_E            : REAL;
    TEO_OK           : TeoStates;
    TEO_DGPSpoprawki : BOOLEAN; (*czy sa poprwki ze stacji referencyjnej GPS*)
    GPS_A            : REAL;
    GPS_R            : REAL;
    GPS_OK           : StanGPS;
    GPS_SAT          : INTEGER; (* reprezentacja * 1 *)
    GPS_GDOP         : INTEGER; (* reprezentacja * 100 *)
    GPS_DIFFMODE     : BOOLEAN;
    GPS_PREC         : CARDINAL;
    Simul            : BOOLEAN;

  PROCEDURE NewDataAvailable;

  PROCEDURE SetEvalPROC
            (    P   : PROC;
                 add : BOOLEAN );
    (* ustaw procedure rozszerzajaca obliczenia P = PROC(NIL) = PROCEDURA PUSTA
    *)

  PROCEDURE Start
            (    GPSAlfaOffset     : INTEGER;
                 aktAzymANieElew   : BOOLEAN;
                 locationsTogether : BOOLEAN    );

  PROCEDURE  CurrGPSAlfaOffset(): INTEGER;
  (* zwraca GPSAlfaOffset ustawiony w Start *)
  
  PROCEDURE  LocationsTogether(): BOOLEAN;
  
  PROCEDURE Stop;

  PROCEDURE InitPilotEventId
            ( VAR ident : DtaSignType );

  PROCEDURE GetPilotEvent
            ( VAR ident : DtaSignType ) : BOOLEAN;

  PROCEDURE AssSim_Dis
            (   currSim_Dis_CP   : Sim_Dis_PROC);

  PROCEDURE AssSim_Alfa
            (   currSim_Alfa_CP   : Sim_Alfa_PROC);

END ScannerI.
