(*.F- *)
(**********************************************************************
|  Title   : Filtr pierwszego stopnia cyfrowy
|  Author  : M.Postol
|  System  : LOGITECH MODULA-2/86
|  History :
|    04-10-96: M.Postol
|      binary counter was added
|    23-10-96: M.Postol
|      filtr cyfrowy po pierwszym wywolaniu podstawia input jako wartosc 
|      poczatkowa
|    Rel 3.0. MPostol
|      Zdefiniowalem procedure MemFiltrInt przeznaczona do 
|      podtrzymywania wartosci na ekranie
|
|  Copyright (C), CAS LODZ POLAND.
|  TEL: 42' 862 547, 42' 87 80 44 FAX/TEL: 42' 84 48 40
|
**********************************************************************)
(*.F+ *)

DEFINITION MODULE FIltr1St;

  TYPE
    ContinerT =
      RECORD
        first:
          BOOLEAN;
        out :
          REAL;
        Tau :
          REAL;
      END;
    Continer2FiltersT =
      RECORD
        first    : BOOLEAN;
        out      : REAL;
        TauSmall : REAL;
        TauLarge : REAL;
      END;
    ContinerBT = 
      RECORD
        count     : CARDINAL;
        maxFCount : CARDINAL;
      END;
    BinaryCounterCon =
      RECORD
        prevVal: BOOLEAN;
        counter: CARDINAL;
      END;
  MemFContiner = 
    RECORD
      lastVal  : INTEGER;
      dataSign : CARDINAL;
      counter  : CARDINAL;
      maxCount : CARDINAL;
    END;
    
  PROCEDURE UstawOkresImpulsowania
            (     okres: REAL);
  (* procedura ustawia okrs impulsowania, do momentu ustawienia domyslnie
     przyjmowany jest czas 0.2s. Okres jest uzywany do obliczenia parametrow
     filtrow
  *)
  
  PROCEDURE InitCont
            ( VAR con : ContinerT;
                  tau : REAL      );
  (* tau stala czasowa filtru w sekundach *)

  PROCEDURE Filtr
            ( VAR con   : ContinerT;
                  input : REAL      ) : REAL;
  (* filtr 1szego stopnia o stalej czasowej tau ustawianej procedura 
     InitCont
  *)
  
  PROCEDURE InitCont2Filters
            ( VAR con      : Continer2FiltersT;
                  tauSmal  : REAL;
                  tauLarge : REAL );

  PROCEDURE Filtr2Filters
            ( VAR con   : Continer2FiltersT;
                  input : REAL      ) : REAL;
  (* Filtr dwuzakresowy; jesli sygnal wejsciowy rozni sie od wartosci 
     wyjsciowej filtru o wiecej niz 20% stosowana jest stala tauLarge,
     inaczej tauSmal.
  *)
  
  PROCEDURE InitContB
            ( VAR con       : ContinerBT;
                  tau       : CARDINAL;
                  startVal  : BOOLEAN  );

  PROCEDURE  FiltrB
             ( VAR con   : ContinerBT;
                   input : BOOLEAN;
               VAR res   : BOOLEAN);

  PROCEDURE InitContBCoun
            ( VAR con       : BinaryCounterCon;
                  startVal  : BOOLEAN  );

  PROCEDURE BinaryCounter
            (    bit : BOOLEAN;
             VAR cont: BinaryCounterCon): CARDINAL;

  PROCEDURE  MemFiltr
             ( VAR con  : MemFContiner;
                   val  : REAL;
                   sign : CARDINAL): INTEGER;

  PROCEDURE InitMemFiltr
             ( VAR con          : MemFContiner;
                   frstDataSign : CARDINAL;
                   fltrMaxCount : CARDINAL);

  TYPE
  
    MemFIntContiner = 
      RECORD
        lastVal  : INTEGER;
        dataSign : CARDINAL;
        counter  : CARDINAL;
        maxCount : CARDINAL;
      END;

  PROCEDURE  MemFiltrInt
             ( VAR con  : MemFIntContiner;
                   val  : INTEGER        ): INTEGER;
                   
  (* Jesli val <> SigNilVal jestona zwracana i licznik zerowany,
     Inaczej licznik jest zwiekszany i zwracana jest ostatnio znana 
     wartosci, po przekroczeniu przez licznik ustawionego fltrMaxCount 
     zwracana jest wartosc SigNilVal.
  *)
  
  PROCEDURE InitMemFIntContiner
             ( VAR con          : MemFIntContiner;
                   fltrMaxCount : CARDINAL);

END FIltr1St.
