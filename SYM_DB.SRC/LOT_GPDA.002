IMPLEMENTATION MODULE LOT_GPda;

FROM Objects IMPORT
  TRect, DisposeStr, NewStr, PString;
FROM Drivers IMPORT
  TEvent, EventType;
FROM IntInputLines IMPORT
  PIntInputLine;
FROM RealInputLines IMPORT
  PRealInputLine;
FROM InputLines IMPORT
  PInputLine, TInputLine;
FROM StaticTexts IMPORT
  PStaticText;
FROM CheckBoxes IMPORT
  PCheckBoxes;
FROM Clusters IMPORT
  NewSItem;
FROM Dialogs IMPORT
  PDialog, TDialog;
FROM Views IMPORT
  TViewOption, TViewOptions, ofCentered, EnableCommand, DisableCommand;
FROM Labels IMPORT
  PLabel;
FROM Storage IMPORT
  ALLOCATE, DEALLOCATE;
FROM Hist IMPORT
  DefineHistorySubView, SetNotification, VHF_HIST_ID, DefineFreqListSubView;
FROM Str IMPORT
  Copy, StrToInt, Compare, StrToCard, StrToReal, Item, CHARSET, Delete;
FROM StringCollections IMPORT
  PStringCollection;
FROM ListBoxes IMPORT
  PListBox;
FROM Buttons IMPORT
  PButton, ButtonFlag, ButtonFlags;
FROM ScrollBars IMPORT
  PScrollBar;
FROM Ini IMPORT
  WritePrivateProfileString, GetPrivateProfileString, DeleteSection;
FROM stdio IMPORT
  sprintf, sscanf;
FROM HistList IMPORT
  HistoryAdd, HistoryStr, HistoryCount, HistoryDelete;
FROM Warn IMPORT
  LockCnt;
FROM DB_Common IMPORT
  BlokGPS,SetBlockGPS,Blok, SetBlock,SetBlock1;
FROM DB_utl IMPORT
  UtnijSpacje, CompareBezSpacji;
IMPORT
  Str, Potw;
FROM Commands IMPORT
  (*hcNoContext, cmQuit, cmNext, cmZoom, cmMenu,*) cmClose, cmCancel;



TYPE
  PVHFD = POINTER TO LOTGPS;


VAR
  p : PVHFD;
  Desktop : PGroup;


CONST
  LOT_LIST = "LotnList.ini";



CLASS LOTGPS( TDialog );
   AktualnyVHF    : ARRAY[0..127] OF CHAR;
   Tytul          : PInputLine;
   Szerokosc,
   Dlugosc        : Blok;
   GPS            : BlokGPS;
   PROCEDURE Init;
   PROCEDURE ResetValue( VAR s : ARRAY OF CHAR );
   PROCEDURE NoweVHF;
   PROCEDURE Zapisz;
   PROCEDURE LoadVHF;
   PROCEDURE Odczytaj;
   PROCEDURE Ok;
(*   PROCEDURE Cancel;*)
   VIRTUAL PROCEDURE Done;
   VIRTUAL PROCEDURE HandleEvent( VAR E : TEvent );
END LOTGPS;

PROCEDURE ZmieniloSie( VAR s : ARRAY OF CHAR );
BEGIN
  IF p # NIL THEN
    p^.ResetValue( s );
  END;
END ZmieniloSie;

CLASS IMPLEMENTATION LOTGPS;

  PROCEDURE Init;
  VAR
    R : TRect;
    n : PInputLine;
    l : PLabel;
    st : PStaticText;
    Scroll : PScrollBar;
    Button : PButton;

    PROCEDURE SetReal(     LabelText : ARRAY OF CHAR;
                       VAR p         : PRealInputLine;
                           max       : LONGREAL;
                           y         : CARDINAL      );
    BEGIN
      R.Assign( 15, y, 32, y+1 );
      NEW( p );
      p^.Init( R, 15, 0.0, max );
      p^.SetFormat( "%.2lf" );
      Insert( p );

      R.Assign( 2, y, 15, y+1 );
      NEW( l );
      l^.Init( R, LabelText, p );
      Insert( l );

    END SetReal;

    PROCEDURE SetInt(     LabelText : ARRAY OF CHAR;
                      VAR p         : PIntInputLine;
                          y         : CARDINAL      );
    BEGIN
      R.Assign( 15, y, 32, y+1 );
      NEW( p );
      p^.Init( R, 15, -180, 359 );
      p^.SetFormat( "%03d" );
      Insert( p );

      R.Assign( 2, y, 15, y+1 );
      NEW( l );
      l^.Init( R, LabelText, p );
      Insert( l );

    END SetInt;

  BEGIN
    INC( LockCnt );
    DisableCommand( cmLOTGPSdatabase );
    R.Assign( 0, 0, 38, 18 );
    TDialog.Init( R, "Baza danych GPS" );
    Options := Options + ofCentered ;
    DefineHistorySubView( ADR( SELF ), "Zadany V~H~F", VHF_HIST_ID, Tytul );

    SetNotification( VHF_HIST_ID, ZmieniloSie );

    SetBlock1( SELF, "~S~zeroko˜†", Szerokosc, "N",2, 3 );
    SetBlock1( SELF, "Dˆu~g~o˜†", Dlugosc, "E",2, 4 );

    R.Assign( 2, 5, 15, 6 );
      NEW( st );
      st^.Init( R, "GPS LOC" );
      Insert( st );

      SetBlockGPS( SELF, GPS , 2, 6);



    R.Assign( 2, 9, 15, 10 );
      NEW( st );
      st^.Init( R, "GPS LOC" );
      Insert( st );

      SetBlockGPS( SELF, GPS , 2, 10);



      R.Assign( 2, 16, 8, 18 );
      NEW( Button );
      Button^.Init( R, "~O~k", cmOk, ButtonFlags{ bfDefault } );
      Insert( Button );
      R.Assign( 8, 16, 18, 18 );
      NEW( Button );
      Button^.Init( R, "~C~ancel", cmCancel, ButtonFlags{ bfNormal } );
      Insert( Button);

(*    R.Assign( 2, 15, 33, 17 );
      NEW( Button );
      Button^.Init( R, "~U~suä z bazy danych",cmLUsunZBazy , ButtonFlags{bfNormal} );
      Insert( Button );*)

    LoadVHF;
    p := ADR( SELF );
    Odczytaj;
  END Init;

  VIRTUAL PROCEDURE HandleEvent( VAR E : TEvent );
  BEGIN
    TDialog.HandleEvent( E );
    IF evCommand IN E.What THEN
      CASE E.Command OF
      |cmOk :
                Ok;
(*      |cmCancel :
          Cancel;
*)
      ELSE
        RETURN;
      END;
    END;
  END HandleEvent;

(*  PROCEDURE Cancel;
  VAR
  END Cancel;*)


  PROCEDURE Ok;
  VAR
  BEGIN
   Zapisz;
(*   cmClose;*)
  END Ok;

  PROCEDURE NoweVHF;
  VAR
    s : ARRAY[0..99] OF CHAR;
    i, cnt : INTEGER;
    ok : BOOLEAN;
  BEGIN
    IF AktualnyVHF[0] = 0C THEN
      RETURN;
    END;
    GetPrivateProfileString( "Lista", "Ilosc", "0"+0C, s,LOT_LIST  );
    cnt := VAL(INTEGER, StrToInt( s, 10, ok ));
    IF NOT ok THEN
      cnt := 0;
    END;
    FOR i := 0 TO cnt-1 DO
      sprintf( s, "VHF%d", i );
      GetPrivateProfileString( "Lista", s, "", s,LOT_LIST  );
      IF Compare( s, AktualnyVHF ) = 0 THEN
        RETURN (* to VHF bylo juz w bazie danych *)
      END;
    END;
    sprintf( s, "VHF%d", cnt );
    WritePrivateProfileString( "Lista", s, AktualnyVHF,LOT_LIST  );
    INC( cnt );
    sprintf( s, "%d", cnt );
    WritePrivateProfileString( "Lista", "Ilosc", s,LOT_LIST  );
  END NoweVHF;

  PROCEDURE LoadVHF;
  VAR
    s : ARRAY[0..99] OF CHAR;
    i, cnt : INTEGER;
    j  : CARDINAL;
    ok : BOOLEAN;
    sp : PString;
  BEGIN
    GetPrivateProfileString( "Lista", "Ilosc", "0"+0C, s,LOT_LIST  );
    cnt := VAL(INTEGER, StrToInt( s, 10, ok ));
    IF NOT ok THEN
      cnt := 0;
    END;
    FOR i := 0 TO cnt-1 DO
      sprintf( s, "VHF%d", i );
      GetPrivateProfileString( "Lista", s, "", s,LOT_LIST  );
      HistoryAdd( VHF_HIST_ID, s );
    END;
    IF cnt = 0 THEN
      AktualnyVHF := '';
    ELSE
      sp := HistoryStr( VHF_HIST_ID, 0 );
      IF sp # NIL THEN
        Copy( AktualnyVHF, sp^ );
      END;
    END;
    Tytul^.SetData( AktualnyVHF );
  END LoadVHF;

  PROCEDURE Zapisz;
  VAR
    s : ARRAY[0..127] OF CHAR;

    PROCEDURE TextI( il : PIntInputLine; Entry : ARRAY OF CHAR );
    BEGIN
      il^.TInputLine.GetData( s );
      WritePrivateProfileString( AktualnyVHF,
                                 Entry,
                                 s,
                                 LOT_LIST  );
     END TextI;

    PROCEDURE TextR( il : PRealInputLine; Entry : ARRAY OF CHAR );
    BEGIN
      il^.TInputLine.GetData( s );
      WritePrivateProfileString( AktualnyVHF,
                                 Entry,
                                 s,
                                 LOT_LIST  );
     END TextR;

  VAR
    i, j : CARDINAL;
    fr   : LONGREAL;
    str  : ARRAY[0..20] OF CHAR;
  BEGIN
(*    Tytul^.GetData( AktualnyVHF );*)
    WHILE AktualnyVHF[0] = ' ' DO
      Str.Delete( AktualnyVHF, 0, 1 );
    END;
    IF AktualnyVHF[0] = 0C THEN
      RETURN;
    END;
    TextI( Szerokosc.Stopnie, "Szerokosc.Stopnie" );
    TextI( Szerokosc.Minuty,  "Szerokosc.Minuty" );
    TextI( Szerokosc.Setne,   "Szerokosc.Setne" );
    TextI( Dlugosc.Stopnie,   "Dlugosc.Stopnie" );
    TextI( Dlugosc.Minuty,    "Dlugosc.Minuty" );
    TextI( Dlugosc.Setne,     "Dlugosc.Setne" );
    TextR( GPS.Odleglosc,     "GPS.Odleglosc" );
    TextR( GPS.Wysokosc,      "GPS.Wysokosc" );
    TextR( GPS.Kat,           "GPS.Kat" );
(*    TextR( Deklinacja,        "Deklinacja" );*)
    NoweVHF;
  END Zapisz;

  PROCEDURE Odczytaj;
  VAR
    s : ARRAY[0..127] OF CHAR;
    CalkowitaIlosc, i, j : INTEGER;
    ok : BOOLEAN;
    sp : PString;

    PROCEDURE TextI( il : PIntInputLine; Entry : ARRAY OF CHAR );
    VAR
      i : INTEGER;
    BEGIN
      GetPrivateProfileString( AktualnyVHF,
                               Entry,
                               "00",
                               s,
                               LOT_LIST  );
      Item( s, s, CHARSET{' '}, 0 );
      i := VAL( INTEGER, StrToInt( s, 10, ok ));
      IF NOT ok THEN
        i := 0;
      END;
      il^.SetData( i );
    END TextI;

    PROCEDURE TextR( il : PRealInputLine; Entry : ARRAY OF CHAR );
    VAR
      r : LONGREAL;
    BEGIN
      GetPrivateProfileString( AktualnyVHF,
                               Entry,
                               "00",
                               s,
                               LOT_LIST  );
      Item( s, s, CHARSET{' '}, 0 );
      r := StrToReal( s, ok );
      IF NOT ok THEN
        r := 0.0;
      END;
      il^.SetData( r );
    END TextR;

  VAR
    fr : LONGREAL;
    str  : ARRAY[0..20] OF CHAR;
  BEGIN
(*    Tytul^.GetData( AktualnyVHF );*)
    IF AktualnyVHF[0] = 0C THEN
      RETURN;
    END;
    TextI( Szerokosc.Stopnie, "Szerokosc.Stopnie" );
    TextI( Szerokosc.Minuty,  "Szerokosc.Minuty" );
    TextI( Szerokosc.Setne,   "Szerokosc.Setne" );
    TextI( Dlugosc.Stopnie,   "Dlugosc.Stopnie" );
    TextI( Dlugosc.Minuty,    "Dlugosc.Minuty" );
    TextI( Dlugosc.Setne,     "Dlugosc.Setne" );
    TextR( GPS.Odleglosc,     "GPS.Odleglosc" );
    TextR( GPS.Wysokosc,      "GPS.Wysokosc" );
    TextR( GPS.Kat,           "GPS.Kat" );
(*    TextR( Deklinacja,        "Deklinacja" );*)
    GetPrivateProfileString( AktualnyVHF,
                             "Identyfikator",
                             "***",
                             str,
                             LOT_LIST );
  END Odczytaj;

  PROCEDURE ResetValue( VAR s : ARRAY OF CHAR );
  BEGIN
    Zapisz;
    Copy( AktualnyVHF, s );
    Odczytaj;
  END ResetValue;

  VIRTUAL PROCEDURE Done;
  VAR
    s : ARRAY[0..1] OF CHAR;
    i : INTEGER;
  BEGIN
    DEC( LockCnt );
    s[0] := 0C;
    Tytul^.GetData( AktualnyVHF );
    ResetValue( s );
    EnableCommand( cmLOTGPSdatabase );
    FOR i := 0 TO VAL( INTEGER, HistoryCount( VHF_HIST_ID ))-1 DO
      HistoryDelete( VHF_HIST_ID, HistoryStr( VHF_HIST_ID, 0 )^ );
    END;
    TDialog.Done;
  END Done;

BEGIN
  AktualnyVHF[0] := 0C;
END LOTGPS;







 


PROCEDURE LOTGPSdatabase ( g : PGroup );
VAR
  d : PVHFD;
BEGIN
  NEW( d );
  Desktop := g;
  WITH d^ DO
    Init;
    g^.Insert( d );
  END;
END LOTGPSdatabase;

BEGIN
  p := NIL;
END LOT_GPda.
