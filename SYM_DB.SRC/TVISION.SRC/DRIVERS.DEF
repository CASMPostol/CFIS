DEFINITION MODULE Drivers;

IMPORT
  Objects;

IMPORT
   Mouse;

(* ******** EVENT MANAGER ******** *)
TYPE
  EventType = (evMouseDown, evMouseUp, evMouseMove, evMouseAuto,
               evKeyDown, evTimer, evCommand, evBroadcast);
(*

 İevXXXX Event Constants and MasksŞ

These mnemonics indicate types of events to Turbo Vision event
handlers.

evXXXX constants are used in several places:

 ş In the What field of an event record
 ş In the EventMask field of a view object
 ş In the variables PositionalEvents and
   FocusedEvents

These event flag values designate standard event types:

  Constant   ³Value³Meaning
 ÍÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
  evMouseDown³$0001³Mouse button pressed
  evMouseUp  ³$0002³Mouse button released
  evMouseMove³$0004³Mouse changed location
  evMouseAuto³$0008³Automatic mouse repeat event
             ³     ³(while mouse button held down)
  evKeyDown  ³$0010³Event is a keystroke
  evCommand  ³$0100³Event is a command
  evBroadcast³$0200³Event is a broadcast

These constants can be used to mask types of events:

  Constant  ³Value³Meaning
 ÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
  evNothing ³$0000³Event has been cleared
  evKeyboard³$0010³Event came from keyboard
  evMouse   ³$000F³Event came from mouse
  evMessage ³$FF00³Event is a message or command

 ÚÄÄÄÄÄÄÄÄÄ Event Flags ÄÄÄÄÄÄÄÄÄ¿
 msb                           lsb
  ÚÄÂÄÂÄÂÄÂÄÂÄÂÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ evMessage
  ³ ³ ³ ³ ³ ³ ³ ³       ÚÄÄÄÄÄÄÄÄÄÄÄ evKeyboard
  ³ ³ ³ ³ ³ ³ ³ ³       ³ ÚÄÂÄÂÄÂÄÄÄ evMouse
 ÉÏÑÏÑÏÑÏÑÏÑÏÑÏÑÏÑÍÑÍÑÍÑÏÑÏÑÏÑÏÑÏ»
 ÈÍÏÍÏÍÏÍÏÍÏÍÏÑÏÑÏÍÏÍÏÍÏÑÏÑÏÑÏÑÏÑ¼
              ³ ³       ³ ³ ³ ³ ÀÄÄÄ evMouseDown
              ³ ³       ³ ³ ³ ÀÄÄÄÄÄ evMouseUp
              ³ ³       ³ ³ ÀÄÄÄÄÄÄÄ evMouseMove
              ³ ³       ³ ÀÄÄÄÄÄÄÄÄÄ evMouseAuto
              ³ ³       ÀÄÄÄÄÄÄÄÄÄÄÄ evKeyDown
              ³ ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ evCommand
              ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ evBroadcast
İSee also
*)
  EventTypes = SET OF EventType;

(* Event masks *)
CONST
  evNothing   = EventTypes{};
  evMouse     = EventTypes{evMouseDown, evMouseUp, evMouseMove, evMouseAuto};
  evKeyboard  = EventTypes{evKeyDown};
  evMessage   = EventTypes{evCommand, evBroadcast};

(* Extended key codes *)
CONST
  kbEsc       = 0011BH;  kbAltSpace  = 00200H;  kbCtrlIns   = 00400H;
  kbShiftIns  = 00500H;  kbCtrlDel   = 00600H;  kbShiftDel  = 00700H;
  kbBack      = 00E08H;  kbCtrlBack  = 00E7FH;  kbShiftTab  = 00F00H;
  kbTab       = 00F09H;  kbAltQ      = 01000H;  kbAltW      = 01100H;
  kbAltE      = 01200H;  kbAltR      = 01300H;  kbAltT      = 01400H;
  kbAltY      = 01500H;  kbAltU      = 01600H;  kbAltI      = 01700H;
  kbAltO      = 01800H;  kbAltP      = 01900H;  kbCtrlEnter = 01C0AH;
  kbEnter     = 01C0DH;  kbAltA      = 01E00H;  kbAltS      = 01F00H;
  kbAltD      = 02000H;  kbAltF      = 02100H;  kbAltG      = 02200H;
  kbAltH      = 02300H;  kbAltJ      = 02400H;  kbAltK      = 02500H;
  kbAltL      = 02600H;  kbAltZ      = 02C00H;  kbAltX      = 02D00H;
  kbAltC      = 02E00H;  kbAltV      = 02F00H;  kbAltB      = 03000H;
  kbAltN      = 03100H;  kbAltM      = 03200H;  kbF1        = 03B00H;
  kbF2        = 03C00H;  kbF3        = 03D00H;  kbF4        = 03E00H;
  kbF5        = 03F00H;  kbF6        = 04000H;  kbF7        = 04100H;
  kbF8        = 04200H;  kbF9        = 04300H;  kbF10       = 04400H;
  kbHome      = 04700H;  kbUp        = 04800H;  kbPgUp      = 04900H;
  kbGrayMinus = 04A2DH;  kbLeft      = 04B00H;  kbRight     = 04D00H;
  kbGrayPlus  = 04E2BH;  kbEnd       = 04F00H;  kbDown      = 05000H;
  kbPgDn      = 05100H;  kbIns       = 05200H;  kbDel       = 05300H;
  kbShiftF1   = 05400H;  kbShiftF2   = 05500H;  kbShiftF3   = 05600H;
  kbShiftF4   = 05700H;  kbShiftF5   = 05800H;  kbShiftF6   = 05900H;
  kbShiftF7   = 05A00H;  kbShiftF8   = 05B00H;  kbShiftF9   = 05C00H;
  kbShiftF10  = 05D00H;  kbCtrlF1    = 05E00H;  kbCtrlF2    = 05F00H;
  kbCtrlF3    = 06000H;  kbCtrlF4    = 06100H;  kbCtrlF5    = 06200H;
  kbCtrlF6    = 06300H;  kbCtrlF7    = 06400H;  kbCtrlF8    = 06500H;
  kbCtrlF9    = 06600H;  kbCtrlF10   = 06700H;  kbAltF1     = 06800H;
  kbAltF2     = 06900H;  kbAltF3     = 06A00H;  kbAltF4     = 06B00H;
  kbAltF5     = 06C00H;  kbAltF6     = 06D00H;  kbAltF7     = 06E00H;
  kbAltF8     = 06F00H;  kbAltF9     = 07000H;  kbAltF10    = 07100H;
  kbCtrlPrtSc = 07200H;  kbCtrlLeft  = 07300H;  kbCtrlRight = 07400H;
  kbCtrlEnd   = 07500H;  kbCtrlPgDn  = 07600H;  kbCtrlHome  = 07700H;
  kbAlt1      = 07800H;  kbAlt2      = 07900H;  kbAlt3      = 07A00H;
  kbAlt4      = 07B00H;  kbAlt5      = 07C00H;  kbAlt6      = 07D00H;
  kbAlt7      = 07E00H;  kbAlt8      = 07F00H;  kbAlt9      = 08000H;
  kbAlt0      = 08100H;  kbAltMinus  = 08200H;  kbAltEqual  = 08300H;
  kbCtrlPgUp  = 08400H;  kbNoKey     = 00000H;

  kbCtrlA     = 01E01H;  kbCtrlB     = 03002H;  kbCtrlC     = 02E03H;
  kbCtrlD     = 02004H;  kbCtrlE     = 01205H;  kbCtrlF     = 02106H;
  kbCtrlG     = 02207H;  kbCtrlH     = 02308H;  kbCtrlI     = 01709H;
  kbCtrlJ     = 0240AH;  kbCtrlK     = 0250BH;  kbCtrlL     = 0260CH;
  kbCtrlM     = 0320DH;  kbCtrlN     = 0310EH;  kbCtrlO     = 0180FH;
  kbCtrlP     = 01910H;  kbCtrlQ     = 01011H;  kbCtrlR     = 01312H;
  kbCtrlS     = 01F13H;  kbCtrlT     = 01414H;  kbCtrlU     = 01615H;
  kbCtrlV     = 02F16H;  kbCtrlW     = 01117H;  kbCtrlX     = 02D18H;
  kbCtrlY     = 01519H;  kbCtrlZ     = 02C1AH;
(* Keyboard state and shift masks *)
TYPE
  SpecialKeys = (kbRightShift, kbLeftShift, kbCtrlShift, kbAltShift,
                 kbScrollState, kbNumState, kbCapsState, kbInsState);
  KeyboardState = SET OF SpecialKeys;

(* Mouse button state masks *)

  Button = Mouse.Button;
  Buttons = Mouse.ButtonSet;

TYPE

(* Event record *)

  PEvent = POINTER TO TEvent;
  TEvent = RECORD
    What : EventTypes;
    CASE :EventType OF
    | evMouseDown, evMouseUp, evMouseMove, evMouseAuto:
        Buttons: Mouse.ButtonSet;
        Double: BOOLEAN;
        Where: Objects.TPoint;
        EState : KeyboardState;
    | evKeyDown:
        CASE :BOOLEAN OF
        | FALSE:
           KeyCode: CARDINAL;
        | TRUE:
           CharCode: CHAR;
           ScanCode: SHORTCARD;
        END;
        KState : KeyboardState;
    | evCommand, evBroadcast:
        Command: CARDINAL;
        CASE :CARDINAL OF
        | 0: InfoPtr: ADDRESS;
        | 1: InfoLong: LONGCARD;
        | 2: InfoWord: CARDINAL;
        | 3: InfoInt: INTEGER;
        | 4: InfoByte: SHORTCARD;
        | 5: InfoChar: CHAR;
        END;
    | evTimer:
        TicksPending : CARDINAL;
        (* nie wiem co *)
    END;
  END;

VAR

(* Initialized variables *)

  ButtonCount: SHORTCARD;
(*

 İButtonCount (variable)Ş

Holds the number of buttons on the mouse, or zero if no mouse is
installed.

Syntax:
  ButtonCount: Byte = 0;

Unit: Drivers

You can use ButtonCount to determine whether mouse support is
available.

The initialization code in Drivers sets the value, which should not
be changed.
*)
  MouseReverse: BOOLEAN;
(*

 İMouseReverse (variable)Ş

Setting MouseReverse to True causes Turbo Vision's event manager to
reverse the mbLeftButton and mbRightButton flags in the Buttons
field of TEvent records.

Syntax:
  const MouseReverse: Boolean = False;
*)
  DoubleDelay: CARDINAL;
(*

 İDoubleDelay (variable)Ş

Defines the time interval between mouse-button presses so you can
distinguish a double-click from two distinct clicks.

Syntax:
  DoubleDelay: Word = 8;

Unit: Drivers

DoubleDelay defines the time interval in 1/18.2 parts of a second

Used by GetMouseEvent to generate a Double event if the clicks occur
within this time interval.
*)
  RepeatDelay: CARDINAL;
(*

 İRepeatDelay (variable)Ş

Defines the number of clock ticks (1/18.2 parts of a second) that
must transpire before evMouseAuto events starts being generated.

Syntax:
  RepeatDelay: Word = 8;

Unit: Drivers

The time interval between evMouseAuto events is always one clock
tick.
*)

(* Uninitialized variables *)

  MouseIntFlag: BOOLEAN;
(*

 İMouseIntFlag (variable)Ş

Used internally by Turbo Vision mouse driver and by views.

Syntax:
  MouseIntFlag: Byte;

Unit: Drivers

Set whenever a mouse event occurs.
*)
  MouseButtons: Buttons;
(*

 İMouseButtons (variable)Ş

Contains the current state of the mouse buttons.

Syntax:
  MouseButtons: Byte;

Unit: Drivers

MouseButtons is updated by the mouse interrupt handler whenever a
button is pressed or released.

You can use the mbXXXX constants to examine MouseButtons.
*)
  MouseWhere: Objects.TPoint;
(*
*)

(* Event manager routines *)

PROCEDURE InitEvents;
(*

 İInitEvents (procedure)Ş

Initializes Turbo Vision's event manager.

Syntax:
  procedure InitEvents;

Unit: Drivers

InitEvents initializes it by enabling the mouse interrupt handler
and showing the mouse.

Called automatically by Init.TApplication.
*)
PROCEDURE DoneEvents;
(*

 İDoneEvents (procedure)Ş

Terminates Turbo Vision's event manager by disabling the mouse
interrupt handler and hiding the mouse.

Syntax:
  procedure DoneEvents;

Unit: Drivers

Called automatically by TApplication.Done.
*)
PROCEDURE ShowMouse;
(*

 İShowMouse (procedure)Ş

Decrements the "hide counter" in the mouse driver.

Syntax:
  procedure ShowMouse;

Unit: Drivers

ShowMouse also makes the mouse cursor visible if counter becomes
zero.
*)
PROCEDURE HideMouse;
(*

 İHideMouse (procedure)Ş

Hides the mouse and increments the internal "hide counter" in the
mouse driver.

Syntax:
  procedure HideMouse;

Unit: Drivers

The mouse cursor is initially visible after the call to InitEvents.

ShowMouse decrements the hide counter and shows the mouse cursor
when the counter becomes zero.

Calls to HideMouse and ShowMouse can be nested, but must also always
be balanced.
*)


PROCEDURE GetTimeEvent(VAR Event:TEvent );


PROCEDURE GetMouseEvent(VAR Event: TEvent);
(*

 İGetMouseEvent (procedure)Ş

Checks whether a mouse event is available.

Syntax:
  procedure GetMouseEvent(var Event: TEvent);

Unit: Drivers

GetMouseEvent checks by polling the mouse event queue maintained by
Turbo Vision's event handler.

If a mouse event has occurred:

  This field   ³ Is set to...
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
  Event.What   ³evMouseDown, evMouseUp, evMouseMove, or evMouseAuto
  Event.Buttons³mbLeftButton or mbRightButton
  Event.Double ³True or False
  Event.Where  ³the mouse position in global coordinates
               ³(corresponding to TApplication's coordinate system)

If no mouse events are available, Event.What is set to evNothing.

GetMouseEvent is called by TProgram.GetEvent.
*)
PROCEDURE GetKeyEvent(VAR Event: TEvent);
(*

 İGetKeyEvent (procedure)Ş

Checks whether a keyboard event is available.

Syntax:
  procedure GetKeyEvent(var Event: TEvent);

Unit: Drivers

GetKeyEvent checks by calling the BIOS INT 16H service.

If a key has been pressed, Event.What is set to evKeyDown and
Event.KeyCode is set to the scan code of the key.

Otherwise, Event.What is set to evNothing.

GetKeyEvent is called by TProgram.GetEvent.
*)

(* ******** SCREEN MANAGER ******** *)

CONST

(* Screen modes

 İsmXXXX Screen ModesŞ

You use these constants with SetVideoMode to set the appropriate
video mode value in ScreenMode.

  Constant ³Value³Meaning
 ÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
  smBW80   ³$0002³Black and white screen mode
  smCO80   ³$0003³Color screen mode
  smMono   ³$0007³Monochrome screen mode
  smFont8x8³$0100³43- or 50-line mode (EGA/VGA)
*)

  smBW80    = 00002H;
  smCO80    = 00003H;
  smMono    = 00007H;
  smFont8x8 = 00100H;

VAR
(* Initialized variables *)

  StartupMode: CARDINAL;
(*

 İStartupMode (variable)Ş

The InitVideo routine stores the current screen mode in StartupMode
before it switches to the screen mode given by ScreenMode.

Syntax:
  StartupMode: Word;

Unit: Drivers

DoneVideo restores the screen mode to the value stored in
StartupMode.
*)

VAR
(* Uninitialized variables *)
  ScreenMode: CARDINAL;
(*

 İScreenMode (variable)Ş

Holds the current video mode.

Syntax:
  ScreenMode: Word;

Unit: Drivers

Set initially by the initialization code of the Drivers unit,
ScreenMode can be changed with SetVideoMode.

ScreenMode values are usually set using the smXXXX screen mode
mnemonics.

*)
  ScreenWidth: CARDINAL;
  ScreenHeight: CARDINAL;
(*

 İScreenHeight and ScreenWidth (variables)Ş

ş ScreenHeight: Set by InitVideo and SetVideoMode to the screen
height in lines of the current video screen.

ş ScreenWidth: Set by InitVideo to the screen width (number of
characters per line).
*)
  HiResScreen: BOOLEAN;
(*

 İHiResScreen (variable)Ş

Set True by InitVideo if the screen supports 43- or 50-line mode
(EGA or VGA); otherwise set False.
*)
  CheckSnow: BOOLEAN;
(*

 İCheckSnow (variable)Ş

CheckSnow performs the same function as the CheckSnow flag in the
Crt unit.

Syntax:
  CheckSnow: Boolean

Unit: Drivers

CheckSnow is set True by InitVideo only if a CGA adapter is
detected.

The user can set the value to False at any time after the InitVideo
call for faster screen I/O.
*)
  ScreenBuffer: CARDINAL;
(*

 İScreenBuffer (variable)Ş

Segment of the pointer to the video screen buffer, set by InitVideo.
Offset is always zero
*)
  CursorLines: CARDINAL;
(*

 İCursorLines (variable)Ş

Set to the starting and ending scan lines of the cursor by
InitVideo.

Syntax:
  CursorLines: Word;

Unit: Drivers

It uses the format expected by BIOS interrupt $10, function 1 to set
the cursor type.
*)

(* Screen manager routines *)

PROCEDURE InitVideo;
(*

 İInitVideo (procedure)Ş

Initializes Turbo Vision's video manager.

Syntax:
  procedure InitVideo;

Unit: Drivers

Saves the current screen mode in StartupMode, and switches the
screen to the mode indicated by ScreenMode.

These variables are updated accordingly:

 ScreenWidth    ScreenHeight   HiResScreen    CheckSnow
 ScreenBuffer   CursorLines

The screen mode can later be changed using SetVideoMode.

InitVideo is called automatically by TApplication.Init.
*)
PROCEDURE DoneVideo;
(*

 İDoneVideo (procedure)Ş

Terminates Turbo Vision's video manager

Syntax:
  procedure DoneVideo;

Unit: Drivers

DoneVideo terminates the video manager by:
 ş restoring the initial screen mode (given
   by StartupMode)
 ş clearing the screen
 ş restoring the cursor.

Called automatically by TApplication.Done.
*)
PROCEDURE SetVideoMode(Mode: CARDINAL);
(*

 İSetVideoMode (procedure)Ş

Sets the video mode.

Syntax:
  procedure SetVideoMode(Mode: Word);

Unit: Drivers

Mode is one of these constants:

 smCO80
 smBW80
 smMono

with smFont8x8 optionally added to select 43- or 50-line mode on an
EGA or VGA.

SetVideoMode initializes the same variables as InitVideo (except for
the StartupMode variable, which isn't affected).

SetVideoMode is normally not called dir ectly.

Instead, use TApplication.SetScreenMode, which also adjusts the
application palette.
*)
PROCEDURE ClearScreen;
(*

 İClearScreen (procedure)Ş

Clears the screen.

Syntax:
  procedure ClearScreen;

Unit: Drivers

ClearScreen assumes that InitVideo has been called first.

You seldom need to use this routine.
*)

(* ******** SYSTEM ERROR HANDLER ******** *)

TYPE

(* System error handler PROCEDURE type *)
  TSysErrorFunc = PROCEDURE( SHORTCARD, CARDINAL ): BOOLEAN;

(* Default system error handler routine *)

PROCEDURE SystemError(Drive: SHORTCARD; ErrorCode: CARDINAL ): BOOLEAN;
(*

 İSystemError (function)Ş

This is the default system error function.

Syntax:
  SystemError(ErrorCode: Integer; Drive: Byte): Integer;

Unit: Drivers

Depending on the value of ErrorCode, SystemError displays one of the
following error messages on the status line, using the color
attributes defined by SysColorAttr or SysMonoAttr:

  Error³
  Code ³Message
 ÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
    0  ³Disk is write-protected in drive X
    1  ³Critical disk error on drive X
    2  ³Disk is not ready in drive X
    3  ³Critical disk error on drive X
    4  ³Data integrity error on drive X
    5  ³Critical disk error on drive X
    6  ³Seek error on drive X
    7  ³Unknown media type in drive X
    8  ³Sector not found on drive X
    9  ³Printer out of paper
   10  ³Write fault on drive X
   11  ³Read fault on drive X
   12  ³Hardware failure on drive X
   13  ³Bad memory image of FAT detected
   14  ³Device access error
   15  ³Insert diskette in drive X

İSee also

 SysErrorFunc
*)

VAR

(* Initialized variables *)

  SysErrorFunc: TSysErrorFunc;
(*

 İSysErrorFunc (variable)Ş

TSysErrorFunc is a function type used by the system error handler.

Syntax:
  SysErrorFunc: TSysErrorFunc = SystemError;

Unit: Drivers

It is defined as follows:

  TSysErrorFunc = function(ErrorCode: Integer; Drive: Byte): Integer;

The system error function is called whenever a DOS critical error
occurs and whenever a disk swap is required on a single floppy
system.

ş ErrorCode is a value between 0 and 15.

ş Drive is the drive number (0=A, 1=B, etc.) for disk related
errors.

The default system error function is SystemError.

You can install your own system error function by assigning to
SysErrorFunc. System error functions cannot be overlayed.

See also:
*)
  SysColorAttr: CARDINAL;
(*

 İSysColorAttr and SysMonoAttr (variables)Ş

The default color used for error message displays by the system
error handler.

Syntax:
  SysColorAttr: Word = $4E4F;
  SysMonoAttr: Word = $7070;

Unit: Drivers

On monochrome systems, SysMonoAttr is used in place of SysColorAttr.

Error messages with a cancel/retry option are displayed on the
status line.

The previous status line is saved and restored when conditions
allow.
*)
  SysMonoAttr: CARDINAL;
(*

 İSysColorAttr and SysMonoAttr (variables)Ş

The default color used for error message displays by the system
error handler.

Syntax:
  SysColorAttr: Word = $4E4F;
  SysMonoAttr: Word = $7070;

Unit: Drivers

On monochrome systems, SysMonoAttr is used in place of SysColorAttr.

Error messages with a cancel/retry option are displayed on the
status line.

The previous status line is saved and restored when conditions
allow.
*)
  CtrlBreakHit: BOOLEAN;
(*

 İCtrlBreakHit (variable)Ş

Set True by the Turbo Vision keyboard interrupt driver whenever the
Ctrl-Break key is pressed.

Syntax:
  CtrlBreakHit: Boolean = False;

Unit: Drivers

This allows Turbo Vision applications to trap and respond to
Ctrl-Break as a user control.

To clear the flag at any time, simply set it to False.

*)
  SaveCtrlBreak: BOOLEAN;
(*

 İSaveCtrlBreak (variable)Ş

InitSysError stores the state of DOS Ctrl-Break checking in this
variable before it disables DOS Ctrl-Break checks.

Syntax:
  SaveCtrlBreak: Boolean = False;

Unit: Drivers

DoneSysError restores DOS Ctrl-Break checking to the value stored in
SaveCtrlBreak.
*)
  SysErrActive: BOOLEAN;
(*

 İSysErrActive (variable)Ş

Indicates whether the system error manager is currently active.

Syntax:
  SysErrActive: Boolean = False;

Unit: Drivers

Set True by InitSysError.
*)

(* System error handler routines *)

PROCEDURE InitSysError;
(*

 İInitSysError (procedure)Ş

Initializes Turbo Vision's system error handler.

Syntax:
  procedure InitSysError;

Unit: Drivers

InitSysError initializes the system error handler by capturing these
interrupt vectors:

  09H  1BH  21H  23H  24H

and clearing the Ctrl-Break state in DOS.

Called automatically by TApplication.Init.
*)
PROCEDURE DoneSysError;
(*

 İDoneSysError (procedure)Ş

Terminates Turbo Vision's system error handler

Syntax:
  procedure DoneSysError;

Unit: Drivers

DoneSysError terminates the system error handler by restoring these
interrupt vectors:

  09H  1BH  21H  23H  24H

and restoring the Ctrl-Break state in DOS.

Called automatically by TApplication.Done.
*)

(* ******** UTILITY ROUTINES ******** *)

(* Keyboard support routines *)

PROCEDURE GetAltChar(KeyCode: CARDINAL): CHAR;
(*

 İDoneSysError (procedure)Ş

Terminates Turbo Vision's system error handler

Syntax:
  procedure DoneSysError;

Unit: Drivers

DoneSysError terminates the system error handler by restoring these
interrupt vectors:

  09H  1BH  21H  23H  24H

and restoring the Ctrl-Break state in DOS.

Called automatically by TApplication.Done.
*)
PROCEDURE GetAltCode(Ch: CHAR): CARDINAL;
(*

 İGetAltCode (function)Ş

Returns the 2-byte scan code (keycode) corresponding to Alt-Ch.

Syntax:
  GetAltCode(Ch: Char): Word;

Unit: Drivers

This function gives the reverse mapping to GetAltChar.
*)
PROCEDURE CtrlToArrow(KeyCode: CARDINAL): CARDINAL;
(*

 İCtrlToArrow (function)Ş

Converts a WordStar-compatible control-key code to the corresponding
cursor key code.

Syntax:
  CtrlToArrow(KeyCode: Word): Word;

Unit: Drivers

If the low byte of KeyCode matches one of these control key values,
the result is the corresponding kbXXXX constant. Otherwise, KeyCode
is returned unchanged.

  Keystroke³Lo(KeyCode)³Result
 ÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍ
  Ctrl-A   ³   $01     ³kbHome
  Ctrl-D   ³   $04     ³kbRight
  Ctrl-E   ³   $05     ³kbUp
  Ctrl-F   ³   $06     ³kbEnd
  Ctrl-G   ³   $07     ³kbDel
  Ctrl-S   ³   $13     ³kbLeft
  Ctrl-V   ³   $16     ³kbIns
  Ctrl-X   ³   $18     ³kbDown
*)
PROCEDURE HotKey(VAR str : ARRAY OF CHAR) : CHAR;
(*
*)

PROCEDURE CStrLen(S: ARRAY OF CHAR): CARDINAL;
(*

 İCStrLen (function)Ş

Returns the length of string S, where S is a control string using
tilde characters (~) to designate shortcut characters.

Syntax:
  CStrLen(S: String): Integer;

Unit: Drivers

The tildes are excluded from the length of the string, as they will
not appear on the screen.
*)

PROCEDURE Assert(Val : BOOLEAN);
(*
*)

CONST
(* MaxViewWidth is the maximum width (in characters) of any view. *)
  MaxViewWidth = 132+2;

(* TDrawBuffer, buffer used by draw methods *)
TYPE
  PDrawBuffer = POINTER TO TDrawBuffer;
  TDrawBuffer = ARRAY [0..MaxViewWidth - 1] OF CARDINAL;

  PROCEDURE MoveChar( VAR b        : TDrawBuffer;
                          XOfs     : CARDINAL;
                          ch       : CHAR;
                          attr     : CARDINAL;
                          Count    : CARDINAL);
(*
 İMoveChar (procedure)Ş

Moves characters into a buffer to be used with TView.WriteBuf or
TView.WriteLine.

Syntax:
  procedure MoveChar(var Dest; C: Char; Attr: Byte; Count: Word);

Unit: Objects

Dest must be TDrawBuffer (or an equivalent array of words).

The low bytes of the first Count words of Dest are set to C, or remain
unchanged if Ord(C) is zero.

The high bytes of the words are set to Attr, or remain unchanged if Attr is
zero.
*)

  PROCEDURE MoveStr(  VAR b        : TDrawBuffer;
                          XOfs     : CARDINAL;
                          str      : ARRAY OF CHAR;
                          Attrs    : CARDINAL);
(*

 İMoveStr (procedure)Ş

Moves a string into a buffer to be used with
TView.WriteBuf or TView.WriteLine.

Syntax:
  procedure MoveStr(var Dest; Str: String; Attr: Byte);

Unit: Objects

Dest must be TDrawBuffer (or an equivalent
array of words).

The characters in Str are moved into the low
bytes of corresponding words in Dest.

The high bytes of the words are set to Attr,
or remain unchanged if Attr is zero.
*)
  PROCEDURE MoveCStr( VAR b        : TDrawBuffer;
                          XOfs     : CARDINAL;
                          str      : ARRAY OF CHAR;
                          Attr     : CARDINAL );
(*

 İMoveCStr (procedure)Ş

Moves a two-colored string into a buffer to be
used with TView.WriteBuf or TView.WriteLine.

Syntax:
  procedure MoveCStr(var Dest; Str: String; Attrs: Word);

Unit: Objects

Dest must be TDrawBuffer (or an equivalent
array of words).

The characters in Str are moved into the low
bytes of corresponding words in Dest.

The high bytes of the words are set to
Lo(Attr) or Hi(Attr).

Tilde characters (~) in the string are used to
toggle between the two attribute bytes passed
in the Attr word.
*)
  PROCEDURE MoveBuf(  VAR b        : TDrawBuffer;
                          XOfs     : CARDINAL;
                          Source   : ARRAY OF CHAR;
                          Attr     : CARDINAL;
                          Count    : CARDINAL);
(*
 İMoveBuf (procedure)Ş

Moves text into a buffer to be used with
TView.WriteBuf or TView.WriteLine.

Syntax:
  procedure MoveBuf(var Dest; var Source; Attr: Byte; Count: Word);

Unit: Objects

Dest must be TDrawBuffer (or an equivalent
array of words) and Source must be an array of
bytes.

Count bytes are moved from Source into the low
bytes of corresponding words in Dest.

The high bytes of the words in Dest are set to
Attr, or remain unchanged if Attr is zero.
*)
 PROCEDURE PutAttribute( VAR b     : TDrawBuffer;
                             XOfs  : CARDINAL;
                             Attr  : CARDINAL);
(*
*)
 PROCEDURE PutChar( VAR b    : TDrawBuffer;
                        XOfs : CARDINAL;
                        Ch   : CHAR);

(*

 İTDrawBuffer (type)Ş

Used to declare buffers for a variety of view Draw methods.

Syntax:
  TDrawBuffer = array[0..MaxViewWidth-1] of Word;

Unit: Views

Typically, data and attributes are stored and formatted line by line
in a TDrawBuffer then written to the screen.
*)

VAR
  BiosKeyboardState[ 40H:17H ] : KeyboardState;

END Drivers. 